## Autogenerated by Scribe. DO NOT MODIFY.

name: 'User registration and auth'
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/v1/user/register
    metadata:
      groupName: 'User registration and auth'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Register new user'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer '
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: ''
        required: true
        example: autem
        type: string
        custom: []
      email:
        name: email
        description: 'Must be a valid email address.'
        required: true
        example: huel.andrew@example.com
        type: string
        custom: []
      password:
        name: password
        description: 'Must match the regex /[a-z]/. Must match the regex /[A-Z]/. Must match the regex /[0-9]/. Must be at least 8 characters.'
        required: true
        example: 'OF:Ot3zy1mYO0zIg34Yz'
        type: string
        custom: []
      portfolio:
        name: portfolio
        description: ''
        required: false
        example:
          - []
        type: 'object[]'
        custom: []
      'portfolio[].symbol':
        name: 'portfolio[].symbol'
        description: ''
        required: false
        example: sint
        type: string
        custom: []
      'portfolio[].number_of_shares':
        name: 'portfolio[].number_of_shares'
        description: 'Must be at least 0.'
        required: false
        example: 48
        type: number
        custom: []
    cleanBodyParameters:
      name: autem
      email: huel.andrew@example.com
      password: 'OF:Ot3zy1mYO0zIg34Yz'
      portfolio:
        -
          symbol: sint
          number_of_shares: 48
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/user/login
    metadata:
      groupName: 'User registration and auth'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Login user. Get a JWT via given credentials.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer '
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Must be a valid email address.'
        required: true
        example: sterling.stamm@example.com
        type: string
        custom: []
      password:
        name: password
        description: 'Must match the regex /[a-z]/. Must match the regex /[A-Z]/. Must match the regex /[0-9]/. Must be at least 8 characters.'
        required: true
        example: '}^a.FgO'
        type: string
        custom: []
    cleanBodyParameters:
      email: sterling.stamm@example.com
      password: '}^a.FgO'
    fileParameters: []
    responses: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/user/logout
    metadata:
      groupName: 'User registration and auth'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Log the user out (Invalidate the token).'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer '
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/user
    metadata:
      groupName: 'User registration and auth'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get the authenticated User.'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer '
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 401
        content: '{"message":"Unauthenticated."}'
        headers:
          cache-control: 'no-cache, private'
          content-type: application/json
          access-control-allow-origin: '*'
        description: null
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
